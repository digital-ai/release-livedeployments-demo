---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: Application Demo
spec:
  - template: Deploy setup live deployment
    description: Create required connections for Deploy live deployment
    scheduledStartDate: 2024-08-28T09:00:00+02:00
    dueDate: 2024-08-28T10:00:00+02:00
    phases:
      - phase: Setup Deployment Server
        tasks:
          - name: Test connection
            type: xlrelease.ScriptTask
            description: Test connection to deployment server.
            script: |-
              from java.lang import Throwable
              
              serverId = releaseVariables['server']
              
              statusResponse = configurationApi.checkStatus(serverId)
            
              if not statusResponse.success:
                if "Cannot find active remote runner" in statusResponse.errorText:
                  raise Exception("Failed to find active remote runner for executing container script.")
                raise Exception(statusResponse.errorText)
          - name: Configure Webhook For Release
            type: xlrelease.ScriptTask
            description: Configuring Release to process incoming deployment notifications
              from Digital.ai Deploy
            script: |-
              from com.xebialabs.xlrelease.api.v1.forms import DeploymentServerSetup
              from java.lang import Throwable
              folderId = getCurrentFolder().getId()
              serverId = releaseVariables['server']
              deploymentServerSetup = DeploymentServerSetup(folderId, serverId)
              try:
                statusWebhookEventSourceId = deploymentServerApi.setupDeploymentServer(deploymentServerSetup)
                releaseVariables['statusWebhookEventSourceId'] = statusWebhookEventSourceId
              except Throwable as e:
                if "Cannot find active remote runner" in str(e):
                  raise Exception("Failed to find active remote runner for executing container script.")
                raise
          - name: Configure Webhook For Deploy
            type: xlrelease.ScriptTask
            description: Configuring Digital.ai Deploy to send deployment notifications
              to Release.
            script: |-
              from java.lang import Throwable
              try:
                autoConfigResponse = deploymentServerApi.autoconfigureDeploymentServer("${statusWebhookEventSourceId}")
              except Throwable as e:
                if "Cannot find active remote runner" in str(e):
                  raise Exception("Failed to find active remote runner for executing container script.")
                raise
        color: "#3d6c9e"
      - phase: Setup Live Deployment
        tasks:
          - name: Get configuration details
            type: xlrelease.ScriptTask
            description: Getting configuration details of the target deployment server.
            script: |-
              statusWebhookEventSource = configurationApi.getConfiguration("${statusWebhookEventSourceId}")
              sourceServer = statusWebhookEventSource["sourceServer"]

              releaseVariables['targetServerTitle'] = sourceServer.title
              releaseVariables['targetServerUrl'] = sourceServer.url
              releaseVariables['statusWebhookEventSourceFolderId'] = statusWebhookEventSource.folderId
              releaseVariables['liveDeploymentConfigurationName'] = sourceServer.title + " deployments"

              if "${liveDeploymentConfigurationId}":
                liveDeploymentConfiguration = configurationApi.getConfiguration("${liveDeploymentConfigurationId}")
                releaseVariables['liveDeploymentConfigurationName'] = liveDeploymentConfiguration.title
                releaseVariables['liveDeploymentConfigurationApplication'] = liveDeploymentConfiguration.application
                releaseVariables['liveDeploymentConfigurationEnvironment'] = liveDeploymentConfiguration.environment
          - name: Configure Live Deployment for Release
            type: xlrelease.ScriptTask
            description: "Configuring **${liveDeploymentConfigurationName}**"
            script: |-
              from com.xebialabs.xlrelease.domain import Configuration
              from com.xebialabs.deployit.plugin.api.reflect import Type
              
              if "${liveDeploymentConfigurationId}":
                liveDeploymentConfiguration = configurationApi.getConfiguration("${liveDeploymentConfigurationId}")
                liveDeploymentConfiguration.title = "${liveDeploymentConfigurationName}"
                liveDeploymentConfiguration.application = "${liveDeploymentConfigurationApplication}"
                liveDeploymentConfiguration.environment = "${liveDeploymentConfigurationEnvironment}"
                
                configurationApi.updateConfiguration("${liveDeploymentConfigurationId}", liveDeploymentConfiguration)
              else:
                statusWebhookEventSource = configurationApi.getConfiguration("${statusWebhookEventSourceId}")
                
                liveDeploymentConfiguration = Configuration()
                liveDeploymentConfiguration.type = Type.valueOf("deploy.DeploymentConfig")
                liveDeploymentConfiguration.title = "${liveDeploymentConfigurationName}"
                liveDeploymentConfiguration.folderId = "${statusWebhookEventSourceFolderId}"
                liveDeploymentConfiguration.setProperty("application", "${liveDeploymentConfigurationApplication}")
                liveDeploymentConfiguration.setProperty("environment", "${liveDeploymentConfigurationEnvironment}")
                
                liveDeploymentConfiguration = configurationApi.addConfiguration(liveDeploymentConfiguration)
                
                liveDeploymentConfigs = statusWebhookEventSource.getProperty("liveDeploymentConfigs")
                liveDeploymentConfigs.add(liveDeploymentConfiguration)
                
                statusWebhookEventSource.setProperty("liveDeploymentConfigs", liveDeploymentConfigs)
                
                configurationApi.updateConfiguration("${statusWebhookEventSourceId}", statusWebhookEventSource)
          - name: Configure Live Deployment in Deploy
            type: xlrelease.ScriptTask
            description: "Configuring webhooks on **${targetServerTitle}**"
            script: |-
              from java.lang import Throwable

              try:
                autoconfigResponse = deploymentServerApi.autoconfigureDeploymentServer("${statusWebhookEventSourceId}")
              except Throwable as e:
                if "Cannot find active remote runner" in str(e):
                  raise Exception("Failed to find active remote runner for executing container script.")
                raise
        color: "#3d6c9e"
    variables:
      - type: xlrelease.StringVariable
        key: statusWebhookEventSourceId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: liveDeploymentConfigurationId
        requiresValue: false
      - type: xlrelease.ReferenceVariable
        key: server
        requiresValue: false
        showOnReleaseStart: false
        label: Deploy server
        referencedType: digitalai.DeployServer
        value: Local Deploy (Docker)
      - type: xlrelease.StringVariable
        key: liveDeploymentConfigurationName
        showOnReleaseStart: false
        label: Configuration name
        description: The name of live deployment configuration
      - type: xlrelease.StringVariable
        key: liveDeploymentConfigurationApplication
        showOnReleaseStart: false
        label: Application
        description: Application path in Digital.ai Deploy. You may enter a regular expression here.
        value: Applications/.*
      - type: xlrelease.StringVariable
        key: liveDeploymentConfigurationEnvironment
        showOnReleaseStart: false
        label: Environment
        description: Environment path in Digital.ai Deploy. You may enter a regular expression here.
        value: Environments/.*
      - type: xlrelease.StringVariable
        key: targetServerTitle
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: targetServerUrl
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: statusWebhookEventSourceFolderId
        requiresValue: false
        showOnReleaseStart: false
    scriptUsername: admin
    scriptUserPassword: admin